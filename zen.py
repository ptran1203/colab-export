from const import CATEGORIES_MAP, INVERT_CATEGORIES_MAP
import numpy as np

def _safe_get(idx):
    try:
        return INVERT_CATEGORIES_MAP[idx]
    except:
        return idx

def draw_md_table(scores, kshot = None):
    if kshot:
        toremove=[]
        kshot = str(kshot)
        for k in scores.keys():
            if kshot not in k:
                toremove.append(k)
        for k in toremove:
            del scores[k]
    """
    sample input:
    {
        'VGG16': [0.739 ,0.786 ,0.721 ,0.755 ,0.776 ,0.774 ,0.683 ,0.884],
        'standard aug': [0.731 ,0.779 ,0.721 ,0.771 ,0.774 ,0.755 ,0.690 ,0.865],
        'GAN v1': [0.744 ,0.774 ,0.736 ,0.772 ,0.775 ,0.757 ,0.695 ,0.878],
    }
    """
    table = '|  |'
    for name in scores.keys():
        table += ' {} |'.format(name)

    table += '\n|'
    for i in range(len(scores) + 1):
        table += '--|'

    table += '\n'
    head = scores[list(scores.keys())[0]]
    len_head = len(head)
    avgs = [sum(v)/len_head for v in scores.values()]
    for i in range(len_head):
        # use i + 1 because we don't care No Finding case 
        table += '| ' + _safe_get(i) + ' |'
        # find the best score value
        best = 0
        row = ''
        for name in scores.keys():
            point = round(scores[name][i], 3)
            if point > best:
                best = point
            row += ' {} |'.format(point)
        row = row.replace(str(best), '**{}**'.format(best))
        table += row + '\n'
    row = '| **Average** |'
    best = 0
    for avg in avgs:
        avg = round(avg, 3)
        if avg > best:
            best = avg
        row += ' {} |'.format(avg)
    row = row.replace(str(best), '**{}**'.format(best))
    table += row + '\n'
    return table


kshot = '10 shot'
t = draw_md_table({
    # 'dagan - 10 shot': [0.679819278205899,0.693323929705353,0.7594283135248986,0.8400056502495528,0.7755641960957229,0.8180532951948842,0.8087543781205753,0.7055755141297276,0.7648541801685029,0.8915538362346874,0.8149760059062384,0.812723560999423,0.5778260869565217,0.5675984752223633,0.76926653984358],
    'dagan - 5 shot': [0.6700861707748081,0.6984478958118464,0.7505069956371295,0.8229079951031171,0.8005558450581901,0.8147145369959397,0.8221532901110367,0.7203926338717432,0.7830946208684381,0.8891843971631207,0.8226430417128091,0.8363777570674122,0.5233444816053512,0.5358463927714245,0.5994715704924964],
    'standard - 10 shot': [0.6758761909967025,0.6773397844243564,0.7527355699312972,0.7824333741406913,0.7236180703090551,0.7408081405862142,0.7505905805201579,0.6929648383355492,0.6937815942968244,0.8743471953578338,0.7350609080841638,0.6476900545866062,0.653422519509476,0.515417196103346,0.6969773832170789],
    'standard - 5 shot': [0.6725202674391066,0.6868450322554551,0.7618033197933906,0.7946868820039551,0.7209871594446893,0.7474511351120317,0.7613682092555332,0.6603207830047241,0.7111211924821775,0.8802184074790459,0.7446622369878184,0.65006435006435,0.5755908584169454,0.4712974728222504,0.6818431621221729],
    'standard - 1 shot': [0.67587801, 0.68246173, 0.74926934, 0.77993031, 0.72359001, 0.75075208, 0.77087339, 0.65732511, 0.69529164, 0.87942456, 0.73259874, 0.65313984, 0.52056299, 0.4239023 , 0.65620376],
    'Ours - 5 shot': [0.6961214042374888,0.7140134279762989,0.7679023118198686,0.8064780111121574,0.7415801499178258,0.7383011951143332,0.7411468812877264,0.6914655879607365,0.6794458846403111,0.862129271437782,0.7518715393133999,0.6656503794434828,0.749526198439242,0.4482281519130312,0.6445360388924117],
    'Ours - 10 shot': [0.6699345976571751,0.6880040546826022,0.7592858933854871,0.8347386759581882,0.7709731297016341,0.8119018263714224,0.8099765258215962,0.7169471867839665,0.7855541153596889,0.8898976466795615,0.8153082318198598,0.8312031243065727,0.6072909698996656,0.5304390794860934,0.7435003170577046],
    'Ours - 1 shot':  [0.6975493250259607,0.7207946571214787,0.766179228724738,0.8109078067614653,0.7287355861092182,0.7625602077887919,0.7665194872941352,0.6808265678481513,0.7221095268956577,0.8907841715022566,0.7319896640826873,0.6638618914480984,0.6216387959866221,0.450275307073274,0.5386176284083704],
    'BAGAN - 10 shot': [0.6861591153376693,0.7024055087059394,0.7475623088109924,0.7986844335624823,0.7213505965981214,0.7039420690108662,0.7320292123109023,0.6786370965460666,0.6832728451069345,0.8811774661508706,0.6922111480251015,0.6122087604846225,0.5513768115942029,0.5146406889735988,0.6487423377721413],
    'BAGAN - 5 shot': [0.6818079466579221,0.7050820036805596,0.756821623790181,0.7958046897071288,0.7244531740623457,0.6933487859808322,0.7297153290111036,0.6642782382393708,0.6779714841218405,0.8840022566086396,0.7055001845699519,0.6068477344339414,0.5789966555183946,0.4115770153889596,0.7104840414288734]
}, kshot)
print(t)
