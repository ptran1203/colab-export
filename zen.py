from const import CATEGORIES_MAP, INVERT_CATEGORIES_MAP
import numpy as np

def _safe_get(idx):
    try:
        return INVERT_CATEGORIES_MAP[idx]
    except:
        return idx

def draw_md_table(scores, kshot = None):
    if kshot:
        toremove=[]
        kshot = str(kshot)
        for k in scores.keys():
            if kshot not in k:
                toremove.append(k)
        for k in toremove:
            del scores[k]
    """
    sample input:
    {
        'VGG16': [0.739 ,0.786 ,0.721 ,0.755 ,0.776 ,0.774 ,0.683 ,0.884],
        'standard aug': [0.731 ,0.779 ,0.721 ,0.771 ,0.774 ,0.755 ,0.690 ,0.865],
        'GAN v1': [0.744 ,0.774 ,0.736 ,0.772 ,0.775 ,0.757 ,0.695 ,0.878],
    }
    """
    table = '|  |'
    for name in scores.keys():
        table += ' {} |'.format(name)

    table += '\n|'
    for i in range(len(scores) + 1):
        table += '--|'

    table += '\n'
    head = scores[list(scores.keys())[0]]
    len_head = len(head)
    avgs = [sum(v)/len_head for v in scores.values()]
    for i in range(len_head):
        # use i + 1 because we don't care No Finding case 
        table += '| ' + _safe_get(i) + ' |'
        # find the best score value
        best = 0
        row = ''
        for name in scores.keys():
            point = round(scores[name][i], 3)
            if point > best:
                best = point
            row += ' {} |'.format(point)
        row = row.replace(str(best), '**{}**'.format(best))
        table += row + '\n'
    row = '| **Average** |'
    best = 0
    for avg in avgs:
        avg = round(avg, 3)
        if avg > best:
            best = avg
        row += ' {} |'.format(avg)
    row = row.replace(str(best), '**{}**'.format(best))
    table += row + '\n'
    return table


kshot = '5 shot'
t = draw_md_table({
    'dagan - 10 shot': [  0.6751992129857354,
   0.6875149143562054,
   0.7386690737676144,
   0.7966964874281948,
   0.6981747972368086,
   0.7271966595979024,
   0.7377692078396304,
   0.6611213261293882,
   0.6994426441996111,
   0.898944229529336,
   0.6960686600221484,
   0.6563839701770736,
   0.5952341137123746,
   0.5813497105746153,
   0.6733882900021138],
    'dagan - 5 shot': [0.6741946767229601,
   0.6857570426095574,
   0.7496474600070208,
   0.7981410678971654,
   0.6843227642602316,
   0.7230737617333267,
   0.7422367538564723,
   0.6488472744759696,
   0.673052495139339,
   0.8919003868471954,
   0.7157696566998892,
   0.6179514489859317,
   0.6239632107023411,
   0.4971198644642101,
   0.6652716127668569],
    'Ours - 5 shot': [0.6977092783880783,
   0.7174310906186172,
   0.7532029486986611,
   0.809305961013278,
   0.7508878823104983,
   0.7476779931285036,
   0.7465086817199493,
   0.6661409861107183,
   0.6935418016850291,
   0.8730738233397807,
   0.7250350682908822,
   0.6604402431988639,
   0.6435061315496098,
   0.4698009318085557,
   0.7004016064257028],
    'Ours - 10 shot': [ 0.6940339946439307,
   0.7120907399542963,
   0.7571776741387093,
   0.8184942084942085,
   0.7450087518873345,
   0.7559139254656342,
   0.753422386168865,
   0.685573251110294,
   0.6952689565780946,
   0.8563910380399742,
   0.7534920634920634,
   0.6669728842142635,
   0.7425027870680043,
   0.5023295213892419,
   0.6858803635595011],
    'BAGAN - 10 shot': [0.6861591153376693,0.7024055087059394,0.7475623088109924,0.7986844335624823,0.7213505965981214,0.7039420690108662,0.7320292123109023,0.6786370965460666,0.6832728451069345,0.8811774661508706,0.6922111480251015,0.6122087604846225,0.5513768115942029,0.5146406889735988,0.6487423377721413],
    'BAGAN - 5 shot': [0.6818079466579221,0.7050820036805596,0.756821623790181,0.7958046897071288,0.7244531740623457,0.6933487859808322,0.7297153290111036,0.6642782382393708,0.6779714841218405,0.8840022566086396,0.7055001845699519,0.6068477344339414,0.5789966555183946,0.4115770153889596,0.7104840414288734]
}, kshot)
print(t)
