from const import CATEGORIES_MAP, INVERT_CATEGORIES_MAP
import numpy as np

def _safe_get(idx):
    try:
        return INVERT_CATEGORIES_MAP[idx]
    except:
        return idx

def draw_md_table(scores, kshot = None):
    if kshot:
        toremove=[]
        kshot = str(kshot)
        for k in scores.keys():
            if kshot not in k:
                toremove.append(k)
        for k in toremove:
            del scores[k]
    """
    sample input:
    {
        'VGG16': [0.739 ,0.786 ,0.721 ,0.755 ,0.776 ,0.774 ,0.683 ,0.884],
        'standard aug': [0.731 ,0.779 ,0.721 ,0.771 ,0.774 ,0.755 ,0.690 ,0.865],
        'GAN v1': [0.744 ,0.774 ,0.736 ,0.772 ,0.775 ,0.757 ,0.695 ,0.878],
    }
    """
    table = '|  |'
    for name in scores.keys():
        table += ' {} |'.format(name)

    table += '\n|'
    for i in range(len(scores) + 1):
        table += '--|'

    table += '\n'
    head = scores[list(scores.keys())[0]]
    len_head = len(head)
    avgs = [sum(v)/len_head for v in scores.values()]
    for i in range(len_head):
        # use i + 1 because we don't care No Finding case 
        table += '| ' + _safe_get(i) + ' |'
        # find the best score value
        best = 0
        row = ''
        for name in scores.keys():
            point = round(scores[name][i], 3)
            if point > best:
                best = point
            row += ' {} |'.format(point)
        row = row.replace(str(best), '**{}**'.format(best))
        table += row + '\n'
    row = '| **Average** |'
    best = 0
    for avg in avgs:
        avg = round(avg, 3)
        if avg > best:
            best = avg
        row += ' {} |'.format(avg)
    row = row.replace(str(best), '**{}**'.format(best))
    table += row + '\n'
    return table


kshot = '10 shot'
t = draw_md_table(
    {
    'dagan - 10 shot': [ 0.6761589331584412,
   0.6955964731339359,
   0.7488862143322803,
   0.8262764855447783,
   0.7882484199836988,
   0.7942627936413998,
   0.815835755272375,
   0.7085146106192187,
   0.7539565780946209,
   0.8736137975499677,
   0.807235142118863,
   0.8047574668264323,
   0.5844035674470457,
   0.5150783566285472,
   0.7526738533079687],
#    'dagan - 5 shot': [0.6700861707748081,
#    0.6984478958118464,
#    0.7505069956371295,
#    0.8229079951031171,
#    0.8005558450581901,
#    0.8147145369959397,
#    0.8221532901110367,
#    0.7203926338717432,
#    0.7830946208684381,
#    0.8891843971631207,
#    0.8226430417128091,
#    0.8363777570674122,
#    0.5233444816053512,
#    0.5358463927714245,
#    0.5994715704924964],
    'standard - 10 shot': [
        0.6758761909967025,
        0.6773397844243564,
        0.7527355699312972,
        0.7824333741406913,
        0.7236180703090551,
        0.7408081405862142,
        0.7505905805201579,
        0.6929648383355492,
        0.6937815942968244,
        0.8743471953578338,
        0.7350609080841638,
        0.6476900545866062,
        0.653422519509476,
        0.515417196103346,
        0.6969773832170789
   ],
   'standard - 5 shot': [
        0.6725202674391066,
        0.6868450322554551,
        0.7618033197933906,
        0.7946868820039551,
        0.7209871594446893,
        0.7474511351120317,
        0.7613682092555332,
        0.6603207830047241,
        0.7111211924821775,
        0.8802184074790459,
        0.7446622369878184,
        0.65006435006435,
        0.5755908584169454,
        0.4712974728222504,
        0.6818431621221729
   ],
   'standard - 1 shot': [0.67587801, 0.68246173, 0.74926934, 0.77993031, 0.72359001,
        0.75075208, 0.77087339, 0.65732511, 0.69529164, 0.87942456,
        0.73259874, 0.65313984, 0.52056299, 0.4239023 , 0.65620376],
    'Ours - 5 shot': [
        0.6995164963290886,
        0.7197910978988453,
        0.765346772980292,
        0.8018193803559658,
        0.7259189481701206,
        0.7455557199454226,
        0.7619867352261718,
        0.6768295097734152,
        0.7019053791315619,
        0.8791908446163765,
        0.7356810631229236,
        0.6856077752629476,
        0.7350836120401338,
        0.45963574756459125,
        0.6983090255759883
    ],
    'Ours - 10 shot': [
       0.671458709077991,
   0.683456187182754,
   0.7502522441201543,
   0.8263828985780206,
   0.7733849093411365,
   0.7814486035080798,
   0.795439302481556,
   0.7208508953070635,
   0.7746759559300065,
   0.8772122823984525,
   0.8028719084533037,
   0.8282518972174145,
   0.5754682274247491,
   0.4433149795284484,
   0.7642570281124497
        ],
    'Ours - 1 shot':  [
        0.6975493250259607,
        0.7207946571214787,
        0.766179228724738,
        0.8109078067614653,
        0.7287355861092182,
        0.7625602077887919,
        0.7665194872941352,
        0.6808265678481513,
        0.7221095268956577,
        0.8907841715022566,
        0.7319896640826873,
        0.6638618914480984,
        0.6216387959866221,
        0.450275307073274,
        0.5386176284083704
        ],
    'BAGAN - 10 shot': [
        0.6884502013080469,
        0.7125872110659468,
        0.7546241412165889,
        0.7981608437705998,
        0.7173902005585174,
        0.7305699396689188,
        0.7553729786124153,
        0.6736160221775904,
        0.6989047310434218,
        0.8975177304964539,
        0.7239387227759322,
        0.6178671282119558,
       0.48473810532260336,
        0.58617628408370,0.5931605351170568,
        ],

    'BAGAN - 5 shot': [
        0.6923721557268039,
        0.7204412627151207,
        0.7619657991073667,
        0.7935775496751106,
        0.7192554883018666,
        0.7257549604642369,
        0.7283888516282883,
        0.6526152018330457,
        0.6902138690861956,
        0.8882051901998711,
        0.697703949796973,
        0.5859805618426308,
        0.63917502787068,
        0.4368064379500211,
        0.5514056224899597
        ]
    }
, kshot)
print(t)
